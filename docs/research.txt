==================================================================================================
Top Priorities:
==================================================================================================
2.  research sqlite & get database creation working from python
3.  research sqlalchemy & encapsulate more sqlite work from there


==================================================================================================
1.  xdg & appdirs:
==================================================================================================
a.  is xdg really a relevant standard?
	- yes, useful for keeping metadata database eventually
b.  should I use a library that already supports the standard?
	- yes, appdirs looks like a nice simple little piece of code
c.  how to install the tool?
	- pip install appdirs


==================================================================================================
2.  pylint
==================================================================================================
a.  how to ensure it imports necessary modules:
    - run it from top directory
b.  how to ignore messages:
    - in comments around code:
         # pylint: disable=W0613     
         <code>
         # pylint: enable=W0613
    - in comments after code:
	 # pylint: disable=C0103
    - in rcfile:
	disable=c0301
c.  example command-line:
    - datagristle$ pylint scripts/gristle_freaker.py  --rcfile .pylint_rcfile
d.  misc:
	- pylint treats all module-level variables as constants - must be all upper case
e.  rcfiles:
	- generate it initially with "pylint --generate-rcfile > .pylintrc"
	- you will get "No config found" messages unless this file is in the $HOME dir
	- refer to project-specific rcfile via "pylint --rcfile .pylintrc"



==================================================================================================
4.  Markdown vs ReStructured Text
==================================================================================================
a.  which to use?  markdown or restructured text?  
	- answer:  markdown
b.  how to install markdown?
	sudo apt-get install markdown
c.  how to use markdown?
	markdown README > README.html
d.  where's info on markdown?
	http://daringfireball.net/projects/markdown/
	http://daringfireball.net/projects/markdown/syntax#list
	http://freewisdom.org/projects/python-markdown/Command_Line
	http://johnmacfarlane.net/pandoc/README.html


==================================================================================================
4.  Licensing
==================================================================================================
a.  what are the implications of using libraries with other licenses?
b.  what are the implications of installing other software with my setup?


==================================================================================================
5.  SQL Alchemy
==================================================================================================
-   easy_install SQLAlchemy
-   http://www.rmunn.com/sqlalchemy-tutorial/tutorial.html
-   apt-cache search python
-   sudo apt-get install python-dev
-   kenfar@glenda:~/projects/datagristle$ sudo easy_install -U SQLAlchemy


==================================================================================================
6.  git & github
==================================================================================================
a.  how to merge
b.  common commands:
	- git add .		                    # adds all files
	- git commit -a                     # commits all files
	- git commit -a -m "first update"	# commits all files (?)
	- git commit foo.py	               	# commits just foo.py
	- git status				        # shows status of all files
	- git push				            # pushes updates to github


==================================================================================================
7.  Packaging
==================================================================================================
a.  How to cause dependencies to be built?


==================================================================================================
8.  Unittest
==================================================================================================
a.  Best way to test script with a main()?
	- move all code into separate functions & classes so that they can be well-tested separately,
          leaving only a tiny amount in main().
b.  Best way to test setup?
c.  Best way to test large volume characteristics?
	- I'm creating unittest files ending in _SLOW.py that take 1+ minute to run.



==================================================================================================
9.  Terminator
==================================================================================================
Tabs
	^tab	& shift-^-Tab 	- move between lower tabs
	F11		              	- fullscreen
	shift-^-pgup & pgdn	    - move big tabs left & right
	alt-left & alt-right	- move between lower tabs 
	maximize tab	     	- shift-ctrl-x
	zoom in		     	    - shift-ctrl-+
	zoom out		        - shift-ctrl-- 	(doesn't work)
	zoom terminal		    - shift-ctrl-z		
	ctrl-pgdn / pgup     	- next/prev tab
	shift-ctrl-n / p     	- next/prev tab

