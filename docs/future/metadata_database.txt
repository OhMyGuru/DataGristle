Metadata Database:

=================================================================================================
Sections:
=================================================================================================

  - Basic Metadata

    - schema architypes - 3 tables that describe schemas in a general way, but do not get
      into deployment specifics.  These tables include:
	- schema	- which might be a database model, xml document, or set of csv files
	- structure	- a hierarchical, self-referencing table that could be either a collection
	  or a field.  A collection could be a database table, a party of an xml document, or 
	  a csv record.
	- element	- an attribute that appears more than once in a schema can be defined 
	  once here and that definition reused anywhere it is referenced.

    - schema instances - 2 tables that describe a specific deployment of a schema.  This 
      allows a schema architype to be implemented in multiple ways (csv file & fixed-length 
      file & database table) or have slightly different characteristics in each implementation.
      These tables are:
	- schema_instance
	- structure_instance

    - schema inspection profiles - 1 table that describes inspection preferences.  This is used by
      tools that collect the extended metadata - to identify concepts such as which fields to inspect,
      which fields to use sampling vs detailed analysis, etc.
	- inspect_profile - where inspection preferences are stored.  This has optional relationalships
	  to a number of tables to allow overrides.

  - Extended Metadata

    - inspection results - 4 tables that contain the results of inspections.   These include:
	- inspect		- one row for every inspection.  Primary key is inspect_id, also stores
                                  timestamps, program involved, profile used, and return codes.
	- schema_inspect	- every inspection will be of a schema & structure.  This table contains
				  all schema-level information that results from the inspection.
	- structure_inspect	- almost every inspection will involve some field-level results - which
				  will require an entry in this table.
	- field_value		- this includes frequency distributions, means, medians, etc.
		
=================================================================================================
Examples:
=================================================================================================

1.   CSV Files:  User has 10 different CSV files to analyze, one of which he wants to repeat the analysis 
	on weekly basis as new data files arrive.  This will allow him to detect changes or new data
	quality problems with the new data.
     -  Schemas:  since no data is shared or referenced between any of these CSV files, each 
	    is stored as a separate schema.
     -  Structures:  each of these CSV files is a simple data structure - so just one row per 
	    CSV to be stored in the structure table (collection type), along with one row for each 
	    field (atomic type).
     -  Instances:  all CSV files will be defined as just a single instance.  The structures won't
            have any rows defined since the profiles will be based on the schemas instead.
     -  Profiles: no detailed profiles will be created - just defaults at the schema-level.
     -  Inspect:  each of the 9 fairly static CSV files will have just a single inspection, but the
            last most dynamic CSV will have hundreds.
     -  Schema_inspect:  each of the CSV files will have 1 entry per inspection, which for one of 
            CSV files means hundreds of rows.
     -  Structure_inspect:  each of the CSV files will have an entry in this table for each inspection,
            for each record and for each field.   The record entries will have attributes like record
            count.  The field entries will have entries like mean value.
     -  Field_value:  each field has an entry in this table for each inspection.  This is where types,
            means, medians, etc are stored.

2.  Database:  User has a database with 25 tables to analyze.  This is just a single database instance,
        but the data changes continuously and the analysis will be repeated weekly.
     -  Schemas:  just one row in this table to represent the database schema.
     -  Structures:   each of the 25 tables has a separate row, and each column also has a separate
	    row in this table.  The columns have hierarchically referencing their tables within this
            table.
     -  Instances:  the schema has a single entry in the instance table, but the tables and columns
            defined in the structures table are not provided with specific instance entries since their
            tool profiles will be kept simple (at least for now).
     -  Profiles:  no detailed profiles will be created - just defaults at the schema level.
     -  Inspect:  each of the 25 tables will be analyzed every week.  So, over the course of the year
            there will be 50 x 25 entries produced for a total of 1250 rows.
     -  Schema_inspect: each of the 50 weekly inspections will get a row in this table.
     -  Structure_inspect: each of the 50 weekly inspections will get a row in this table for each
            of the 25 tables as well as for each column.
     -  Field_value:  each of the columns inspected will store its frequency distributions here.


